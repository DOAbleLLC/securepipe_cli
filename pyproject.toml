[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "securepipe-cli"
version = "1.0.0"
description = "SecurePipe CLI - Secure Infrastructure Pipeline Management"
authors = [
    {name = "SecurePipe Team", email = "team@securepipe.com"}
]
readme = "README.md"
license = {text = "Proprietary"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: Other/Proprietary License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
keywords = ["cli", "infrastructure", "security", "pipeline", "devops"]
dependencies = [
    "click>=8.0.0",
    "requests>=2.25.0",
    "tabulate>=0.8.0",
    "pyyaml>=6.0",
    "rich>=12.0.0",
    "keyring>=23.0.0",
    "python-dotenv>=0.19.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "pre-commit>=2.19.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
]

[project.scripts]
securepipe = "securepipe_cli.main:cli"

[project.urls]
Homepage = "https://github.com/securepipe/securepipe-cli"
Documentation = "https://docs.securepipe.com/cli"
Repository = "https://github.com/securepipe/securepipe-cli"
Issues = "https://github.com/securepipe/securepipe-cli/issues"

[tool.poetry]
name = "securepipe-cli"
version = "1.0.0"
description = "SecurePipe CLI - Secure Infrastructure Pipeline Management"
authors = ["SecurePipe Team <team@securepipe.com>"]
readme = "README.md"
license = "Proprietary"
packages = [{include = "securepipe_cli", from = "src"}]
keywords = ["cli", "infrastructure", "security", "pipeline", "devops"]

[tool.poetry.dependencies]
python = "^3.8"
click = "^8.0.0"
requests = "^2.25.0"
tabulate = "^0.8.0"
pyyaml = "^6.0"
rich = "^12.0.0"
keyring = "^23.0.0"
python-dotenv = "^0.19.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.8.0"
black = "^22.0.0"
isort = "^5.10.0"
flake8 = "^4.0.0"
mypy = "^0.950"
pre-commit = "^2.19.0"

[tool.poetry.scripts]
securepipe = "securepipe_cli.main:cli"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["securepipe_cli"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=securepipe_cli",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/securepipe_cli"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 